#!/usr/bin/env python3
"""
Script de teste para as funcionalidades de configura√ß√£o
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_config_endpoints():
    """Testa os endpoints de configura√ß√£o"""
    
    print("üß™ Testando endpoints de configura√ß√£o...")
    
    # 1. Testar configura√ß√£o padr√£o
    print("\n1. Carregando configura√ß√£o padr√£o...")
    try:
        response = requests.get(f"{BASE_URL}/api/config")
        if response.status_code == 200:
            config = response.json()
            print("‚úÖ Configura√ß√£o carregada com sucesso")
            print(f"   Tipo: {config.get('importType', 'N/A')}")
            print(f"   Caminho: {config.get('filePath', 'N/A')}")
            print(f"   Auto Import: {config.get('autoImport', 'N/A')}")
            print(f"   Hor√°rio: {config.get('importHour', 'N/A')}:{config.get('importMinute', 'N/A')}")
        else:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {response.text}")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå N√£o foi poss√≠vel conectar ao backend. Certifique-se de que est√° rodando em http://localhost:8000")
        return
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return
    
    # 2. Salvar nova configura√ß√£o
    print("\n2. Salvando nova configura√ß√£o...")
    new_config = {
        "importType": "local",
        "filePath": "C:\\teste\\planilha.xlsx",
        "username": "",
        "password": "",
        "autoImport": True,
        "importHour": "14",
        "importMinute": "30",
        "enabled": True
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/config", json=new_config)
        if response.status_code == 200:
            print("‚úÖ Configura√ß√£o salva com sucesso")
        else:
            print(f"‚ùå Erro ao salvar configura√ß√£o: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√£o: {e}")
    
    # 3. Testar conex√£o (deve falhar pois o arquivo n√£o existe)
    print("\n3. Testando conex√£o...")
    try:
        response = requests.post(f"{BASE_URL}/api/config/test", json=new_config)
        if response.status_code == 200:
            print("‚úÖ Conex√£o testada com sucesso")
        else:
            print(f"‚ùå Erro ao testar conex√£o: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
    
    # 4. Verificar configura√ß√£o atualizada
    print("\n4. Verificando configura√ß√£o atualizada...")
    try:
        response = requests.get(f"{BASE_URL}/api/config")
        if response.status_code == 200:
            config = response.json()
            if config.get('importHour') == '14' and config.get('importMinute') == '30':
                print("‚úÖ Configura√ß√£o atualizada corretamente")
            else:
                print("‚ùå Configura√ß√£o n√£o foi atualizada corretamente")
        else:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro ao verificar configura√ß√£o: {e}")
    
    # 5. Testar configura√ß√£o de rede
    print("\n5. Testando configura√ß√£o de rede...")
    network_config = {
        "importType": "network",
        "filePath": "\\\\servidor\\compartilhamento\\planilha.xlsx",
        "username": "usuario",
        "password": "senha123",
        "autoImport": True,
        "importHour": "09",
        "importMinute": "00",
        "enabled": True
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/config/test", json=network_config)
        if response.status_code == 200:
            print("‚úÖ Conex√£o de rede testada com sucesso")
        else:
            print(f"‚ùå Erro ao testar conex√£o de rede: {response.text}")
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o de rede: {e}")

if __name__ == "__main__":
    test_config_endpoints() 